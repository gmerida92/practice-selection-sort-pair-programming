/*TODO: Grid Layout Part 2 */
/*? Grid container: To set a parent element to be a grid container */
/* Grid: behaves like a block element and take full width of parent element  */
/* Inline-grid: Flow on same line with other "inline" elements */
.grid-container {
	display: grid;
}

/*? Columns and rows  */
/* 
* Set number of columns and rows in a grid as well as their track sizes
* by using grid-template-rows and grid-template-columns
*
* <track-size>: size of either the row or columns (can be px, %, fr, or auto
* which auto means to expand or shrink depending on content within it
*/
.grid-container {
	grid-template-columns: <track-size> <track-size> <track-size> ...;
	grid-template-rows: <track-size> <track-size> <track-size> ...;
}

/*? Repeating columns and rows */
/* allows repeat column and rows of same size */
.grid-container {
	display: grid;
	grid-template-columns: repeat(5, 100px);
	grid-template-rows: repeat(4, 25%);
}

/*? Fractions (fr) */
/* fr: specifies fraction of available space to be filled up by a row or column */
/** Below is an example of creating grid with four equal columns  */
.grid-container {
	display: grid;
	grid-template-columns: 1fr 1fr 1fr 1fr;
}

.grid-container {
	display: grid;
	grid-template-columns: 25% 25% 25% 25%;
}

.grid-container {
	display: grid;
	grid-template-columns: repeat(4, 1fr);
}

.grid-container {
	display: grid;
	grid-template-columns: repeat(4, 25%);
}

/** Below is an example with middle column that is twice the width of the left and right column */
.grid-container {
	display: grid;
	grid-template-columns: 1fr 2fr 1fr;
}

.grid-container {
	display: grid;
	grid-template-columns: 25% 50% 25%;
}

/*? Using combinations  */
/** Can combine size format together like so: */
/* 
* - Pixels (px) are exact and will not adjust as the browser is resized
* - auto will expand or shrink based on what's contained w/n column/row
* - Percents (%) are calculated as that portion of remaining space after
*   exact measurements and auto have been removed
* - Fractional units (fr) are flexibly calculated AFTER the other measurements
*/
.grid-container {
	display: grid;
	grid-template-columns: 12% 200px auto 400px;
	grid-template-rows: 50px 2fr 2fr 1fr;
}

/*? Grid template areas  */
/* 
* Can combine grid container property grid-template-areas w/ grid items property grid-areas 
* to define areas of a template, including whether they span columns
*/
.grid-container {
	display: grid;
	grid-template-columns: repeat(
		3,
		1fr
	); /* fr: causes column to flexibly fill available space */
	grid-template-rows: auto; /* By default: auto resize to fit content */
	grid-template-areas:
		'header   header    header' /* takes up entire first row - all three columns across */
		'main     .         sidebar' /* fills first column in second row, blank space (.), and sidebar */
		'footer   footer    footer';
	background-color: white;
}

.item-1 {
	grid-area: header;
	background-color: mediumpurple; /* purple */
}

.item-2 {
	grid-area: main;
	background-color: mediumseagreen; /* green */
}

.item-3 {
	grid-area: sidebar;
	background-color: indianred; /* red */
}

.item-4 {
	grid-area: footer;
	background-color: deepskyblue; /* blue */
}

/*? Grid Gaps: spaces between rows/columns  */
/* 
* grid-row-gap: accepts a size value
* grid-column-gap: accepts a size value
*/
.grid-container {
	grid-row-gap: 30px;
	grid-column-gap: 20px;
	/* or grid-gap which is row first then column */
	grid-gap: 30px 20px; /* <grid-row-gap> | <grid-column-gap> */
}

/*? Justify and align items */
/* 
* Justify-items: align items on the row (horizontally)
*     •   start - aligns items with start line of their cell (left side)
*     •   end - align items with end line of their cell (right side)
*     •   center - align items in center of cell (center)
*     •   stretch - fills whole width of cell (default value)
*/

/* 
* align-items: align items on column (vertically)
*     •   start - align items w/ start line of cell (top of cell)
*     •   end - aligns item w/ end line of cell (bottom of cell)
*     •   center  - align items in center of cell (starter)
*     •   stretch - fill whole height of cell (default value)
*/

.grid-container {
	justify-items: center; /* OR start | end | stretch */
	align-items: center; /* OR start | end | stretch */
}

/*? Grid flow: allows ability to change direction */
.grid-container {
	grid-auto-flow: row; /* by default: column first then row */
	grid-auto-flow: column; /* row first then column */
}

/*TODO: Grid Layout Part 3 */
/*? Grid areas (recall) */
.item-1 {
	grid-area: header;
}

.item-2 {
	grid-area: main;
}

.item-3 {
	grid-area: sidebar;
}

.item-4 {
	grid-area: footer;
}

.grid-container {
	display: grid;
	grid-template-columns: repeat(3, 1fr);
	grid-template-rows: auto;
	grid-template-areas:
		'header   header    header' /* takes up entire first row - all three columns across */
		'main     .         sidebar' /* fills first column in second row, blank space (.), and sidebar */
		'footer   footer    footer';
}

/*? Justify and align self  */
/* For aligning single grid item, we can use properties on the item */
/* 
* • justify-self: align self on row (horizontally)
*     •  start  - align item w/ start line of cell (left side)   
*     •  end    - align item w/ end line of cell (right side)
*     •  center - align item in center of cell (center)
*     •  stretch- fills whole width of cell (default value)
* • align-self: align self on column (vertically)
*     • start   - align item w/ start line of cell (top of cell)
*     • end     - align item w/ end line of cell (bottom of cell)
*     • center  - align item in center of cell (center)
*     • stretch - fills whole height of cell (default value)
*/
.item-3 {
	align-self: stretch; /* OR start | end | center */
}
