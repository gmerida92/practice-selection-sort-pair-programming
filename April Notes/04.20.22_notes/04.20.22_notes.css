/* Type Selector */
/* matches elements by nodes name */
div {
  background-color: #000000;
}

/* Class selector */
/* matches element by class name */
.active{
  color: #ffffff
}

/* ID selector */
/* matches element by ID name */
#list-1{
  border: 1px solid gra;
}

/* Universal selector */
/* matches element of any type */
* {
  padding: 10px;
}

/* Attribute selector */
/* matches element based on presence or values of any given attribute */
a[title]{
  font-size: 2em;
}

/****************************************************************************
*                               Class Selector
****************************************************************************/
/* Class selector = class name preceded by a period */
.boxy{
  border-radius: 4px;
  box-shadow: 0px 2px gray; /* offset-x | offset-y | color */
  filter: blur(2px);
  background-color: #000000;
  opacity: .2; /* 100% - 1 */
}

/* To call specific class, use something like ".nameA.nameB" in "nameA nameB" (nameA = box nameB = orange) in "box orange" e.g. */

/* Calling ID and subheading instead use: */
/* h1#heading or h2.subheading */

/****************************************************************************
*                          Combinators Selector
****************************************************************************/
/* Combinators Selector: Type of CSS selector that combine other selectors into more complex or targeted selector */

/* Descendenant selector */

/* UNMAINTAINABLE CODE. DO NOT DO THIS. EXAMPLE ONLY. */
div abbr {
  text-transform: uppercase;
}

/* UNMAINTAINABLE CODE. DO NOT DO THIS. EXAMPLE ONLY. */
div abbr {
  text-transform: uppercase;
}

/* Adjacent sibling selectors */
/* Will work only on the element immediately preceded by the first (the one before the + selector) in for ex: h1 + h2 { }*/
h1+h2 {
  font-style: italic;
}

a:hover{
  font-family: "Roboto Condensed", sans-serif;
  color: #4FC3F7;
  text-decoration: none;
  border-bottom: 2px solid #4FC3F7;
}

/****************************************************************************
*                          Pseudo Classes
****************************************************************************/
/* active -- applies to elements like buttons when activiated  */
/* checked -- applies to radio input, checkbox inputs, and options in drop down when the user has toggled it into an "on" state */
/* disabled: applies to any disabled elements, like a disabled button or input */
/* first-child:  applies to first element among a group of sibilings element (like using +, the adjacent sibiling selector) */
/* focus: applies to elements that have the currnt focus, like inputs and buttons */
/* hover: applies to elements that currently have the pointing device (cursor) directory over it */
/* invalid: applies to any form element in an invalid state due to client-side form validation */
/* last-child: applies to last element among a group of sibiling element */
/* not (selector): represents elements that do not match the provided selector */
/* required: applies to form elements that are required */
/* valid: applies to any form element in a valid state */
/* visited: applies to anchor tags of which the user has already been to the URL that the href points to */

/****************************************************************************
*                          Pseudo Selector
****************************************************************************/
/* Similar to pseudo classes, the selector select the elements in the DOM */
/*?  Pseudo-element is a keyword added to a selector that lets you stlye a specific part of the selected elements */
/* :: after -- creates the child as the last child of the selected element */
/* :: before -- creates the child as the first child of the selected */

/* 
<style>p::before {
  background-color: lightblue;
  border-right: 4px solid violet;
  content: ':-) ';
  margin-right: 4px;
  padding-left: 4px;
}

</style><p>This is the first paragraph</p><p>This is the second paragraph</p><p>This is the third paragraph</p> */

/****************************************************************************
*                          CSS Rules
****************************************************************************/
/* A collection of single or compound selectors, a curly brace, zero, or more properties and their settings, and a closed curly braces */

/* For example, A CSS Rule that removes padding and margin from the document */
/* ------------------------------------------------------------------------- */
/* The selectors are "html" and "body" */
/* The properties are "padding" and "margin", each with a value 0 */
html, body {
  padding: 0;
  margin: 0;
}

/* CSS Rule Specifity: */
/* If there are two or more of the same css rule specifity, the last declaration found in CSS is applied to the element */

/*! Four number calculation: Specifiy calculation are ranked in increasing order by. . . .*/
/* - number of tags selectors in the selector */
/* - number of class, pseudo-element, and attribute selectors in the selector */
/* - number of id selectors in the selector */
/* - is this an inline style */

/*? Algorithm to determine the most specific rule when selecting two selectors goes: */
/* 1. If one has a greater number of ids, then it wins. If there is a winner, STOP */
/*                          ------------                                           */
/* 2. They must have the same number of ids, so the one with the greater number of classes,
/*                                                                       ---------------- */
/* pseudo-classes, and attributes wins. If there is a winner, STOP */
/* --------------      ----------                                  */
/* 3. They must have the same number of ids and the same number of classes too.
    The rule with the greatest number of tags wins. If there is a winner, STOP */
/*                             --------------                                  */
/* 4. They have the same number of ids, classes, and tags, The rule that the browser
    read last wins */
/*  --------       */

/****************************************************************************
*                          Typography
****************************************************************************/
/*! Properties  */
/*! Font-family */
/* font-family: 'Helvetica Neue', 'Helvetica', sans-serif; */
/* serif: font that has serifs (tail) */
/* sans-serif font that does not have serifs (without tail) */
/* monotone (typerwriter font): font where every letter and symbol have same width */
/* cursive/fantasy font: novelty font that don't get a lot of use due to widely different looks between browsers and OSes */

/*? We can import font family/style like Google Font through using: */
/*? @import url('https://fonts.googleapis.com/css2?family=Liu+Jian+Mao+Cao&display=swap'); */

/*! Font-size */
/* em: font size of the containing element */
/* rem: font size of the root element */

/*! Font-style */
/*? setting use if we want to have some of the text in italic, for example */
/* use <i> (italic) or <em> (emphasis) or b (bold) */


/*! Font-weight */
/* keyword values for font-weight: "normal" and "bold" */
/* relative values for font-weight: "lighter" and "bolder" */

/*! Fext-align */
/* align: left, center, right, justify */
/*? justify prevent dyslexia proper reading  */

/*! Fext-decoration */
/* Default browser setting */
a{
  text-decoration: underline currentcolor;
}

/*! Text-transform */
/* examples: uppercase, lowercase, capitalize */

